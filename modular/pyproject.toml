[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "axiom-edge"
dynamic = ["version"]
description = "Professional AI-Powered Modular Trading Framework with Advanced Analytics"
readme = "README.md"
license = {text = "GPL-3.0"}
authors = [
    {name = "AxiomEdge Team", email = "sam.minns@example.com"}
]
maintainers = [
    {name = "Sam Minns", email = "sam.minns@example.com"}
]
keywords = [
    "trading", "finance", "machine-learning", "artificial-intelligence",
    "backtesting", "algorithmic-trading", "quantitative-finance",
    "feature-engineering", "time-series", "genetic-algorithm"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "scipy>=1.7.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    "requests>=2.25.0",
    "pyyaml>=5.4.0",
    "tqdm>=4.61.0",
    "joblib>=1.0.0",
    "optuna>=3.0.0",
    "shap>=0.41.0",
    "ta-lib>=0.4.0",
    "psutil>=5.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.1.0",
    "pytest-cov>=3.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.6.0",
    "flake8>=5.0.0",
    "mypy>=0.971",
    "pre-commit>=2.20.0",
    "isort>=5.10.0",
]
docs = [
    "sphinx>=5.1.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",
]
gpu = [
    "torch>=1.12.0",
    "torch-audio>=0.12.0",
    "torch-vision>=0.13.0",
    "cupy-cuda11x>=11.0.0",
]
advanced = [
    "tensorflow>=2.9.0",
    "keras>=2.9.0",
    "prophet>=1.1.0",
    "xgboost>=1.6.0",
    "lightgbm>=3.3.0",
    "catboost>=1.0.0",
]
brokers = [
    "oandapyV20>=0.6.3",
    "ib-insync>=0.9.70",
    "ccxt>=2.0.0",
    "alpaca-trade-api>=2.3.0",
    "python-binance>=1.0.0",
]
data = [
    "quandl>=3.7.0",
    "fredapi>=0.5.0",
    "yfinance>=0.1.87",
    "alpha-vantage>=2.3.1",
    "polygon-api-client>=1.9.0",
]
ai = [
    "google-generativeai>=0.3.0",
    "openai>=0.27.0",
    "anthropic>=0.3.0",
]
visualization = [
    "plotly>=5.10.0",
    "bokeh>=2.4.0",
    "dash>=2.6.0",
    "streamlit>=1.12.0",
]

[project.urls]
Homepage = "https://github.com/sam-minns/AxiomEdge-PRO"
Repository = "https://github.com/sam-minns/AxiomEdge-PRO"
Documentation = "https://github.com/sam-minns/AxiomEdge-PRO/wiki"
"Bug Reports" = "https://github.com/sam-minns/AxiomEdge-PRO/issues"
Discussions = "https://github.com/sam-minns/AxiomEdge-PRO/discussions"
Releases = "https://github.com/sam-minns/AxiomEdge-PRO/releases"

[project.scripts]
axiom-edge = "axiom_edge.main:main"
axiom-edge-framework = "main:main"

[tool.setuptools]
packages = ["axiom_edge"]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "axiom_edge.__version__"}

[tool.setuptools.package-data]
axiom_edge = [
    "configs/*.json",
    "configs/*.yaml",
    "configs/*.yml",
    "templates/*.txt",
    "templates/*.html",
    "templates/*.md",
    "data/*.csv",
    "data/*.json",
    "schemas/*.json",
    "*.md",
    "*.txt",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["axiom_edge"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
